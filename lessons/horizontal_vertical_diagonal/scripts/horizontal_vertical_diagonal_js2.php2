/*<?php
header("Content-type: text/javascript");
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}
$_SESSION["tC_ClientTimeStarted"] = time()+0;
$_SESSION["tC_ServerTimeStarted"] = time()+0;
$logFile = fopen("/var/www/jimfuqua/tutor/logs/horizontal_vertical_diagnonal_js", "w");
// This data is erroneous on first lesson after login.
$v = var_export($_SESSION, true);
    fwrite($logFile, "\n" .  __LINE__ . ' horizontal_vertical_diagnonal_js $_SESSION =:' .  $v . " \n");
?>*/
/*eslint-env browser, jquery */
/*eslint camelcase: 0 no-alert:1 */
var CorrectAnswer,
    AnswerCorrect,
    errorsMade = 0,
    tCClientTimeStarted = new Date().getTime(),
    serverTimeStarted = "<?php echo $_SESSION['tC_ServerTimeStarted'] ?>",
    lessonId = "<?php echo $_SESSION['lesson_id'] ?>",
    today = new Date(),
    tA_S_ID = "<?php echo $_SESSION['tA_S_ID'] ?>",
    tC_Time_client_processed_answer = today.getTime(),
    //lessons = [],
    questions = [],
    tC_More_data_about_response = "",
    AnswerEntered,
    c = document.getElementById("myCanvas");
    ctx = c.getContext("2d");

$("#quit_button_top_left").click(function () {
    "use strict";
    alert("Press Alt-F4 to close any window. ");
});

function exitFromLesson() {
    "use strict";
    //var postTo = "/tutor/scripts/cAssignment_get_next_lesson.php",
    //    data = {"tA_S_ID": tA_S_ID};
    // THIS IS THE EXIT FROM THIS LESSON
    /** Could not get the next four lines to go to the next lesson.
        I wanted to do so because it could carry tA_S_ID to cAssignment
        thus avoiding session variables.  Needs more work because it should work
        when coupled with window.location and data returned.
    **/
    //$.post("/tutor/scripts/cAssignment_get_next_lesson.php", {"tA_S_ID": tA_S_ID});
    //$.post(postTo, {"tA_S_ID": tA_S_ID}).done(function( data ) {
    //    alert( "Data Loaded: " + data );
    //});
    // Either of the following lines work.  Which is best?
    //document.location.href = "/tutor/scripts/cAssignment_get_next_lesson.php";
    window.location.href = "/jimfuqua/tutor/src/scripts/cAssignment_get_next_lesson.php";
}
/*
function updateTCompleted() {
    "use strict";
    var questionAndResponse,
        postString,
        postTo;
    questionAndResponse = $("#instruction_h1").text();
    postString = {
        "tC_Correct": AnswerCorrect,
        "tC_ClientTimeStarted": tCClientTimeStarted,
        "tC_Time_client_processed_answer": (new Date()).getTime(),
        "tC_Question_and_Response": questionAndResponse,
        "tC_More_data_about_response": "none",
        "tA_ErrorsMade": errorsMade
    };
    postTo = "http://localhost/jimfuqua/tutor/scripts/updateTCompleted.php";
    // this creates a new entry in tCompleted.
    $.post(postTo, postString);
}

function adjustTARepsTowardM(newValue) {
    "use strict";
    var postTo = "http://localhost/jimfuqua/tutor/src/scripts/update_tAssignments.php",
        postString = {
            "tA_RepsTowardM": newValue,
            "lesson_id": lessonId,
            "sender": "horizontal_vertical_diagonal"
        };
    $.post(postTo, postString);
}

function registerCorrectAnswer() {
    "use strict";
    if (errorsMade === 0) {
        adjustTARepsTowardM("Plus1");
    } else {
        adjustTARepsTowardM("0");
    }
    updateTCompleted();
    exitFromLesson();
}

function registerWrongAnswer() {
    "use strict";
    var msg;
    errorsMade = errorsMade + 1;
    adjustTARepsTowardM("0");
    updateTCompleted();
    msg = "<p>The line is " + CorrectAnswer;
    msg = msg + ". <br /><br /> Please press the " + CorrectAnswer + " button.</p>";
    $("#error_message").append(msg);
    $("#error_message").show();
    $.post("http://localhost/jimfuqua/tutor/src/scripts/increment_tA_ErrorsMade.php");
    return false;
}

function shuffleButtons() {
    "use strict";
    var randomNumber = Math.floor((Math.random() * 4) + 1);
    //console.log("randomNumber = " + randomNumber);
    if (randomNumber === 1) { // vertical first
        $("#horizontal_button").insertAfter("#vertical_button"); // V,H,D
        $("#diagonal_button").insertAfter("#horizontal_button");
    }
    if (randomNumber === 2) { //
        $("#horizontal_button").insertAfter("#diagonal_button"); // V,D,H
        $("#diagonal_button").insertAfter("#vertical_button");
    }
    //                                                   Default is H,V,D
    if (randomNumber === 4) { //
        $("#horizontal_button").insertAfter("#diagonal_button"); // D,H,V
        $("#vertical_button").insertAfter("#vertical_horizontal");
    }
}

function onClick(event) {
    "use strict";
    var buttonClicked = event.target.id;
    //console.log("buttonClicked = " + buttonClicked);
    AnswerCorrect = (buttonClicked === CorrectAnswer);
    if (AnswerCorrect === true) {
        registerCorrectAnswer(CorrectAnswer, event.target.id); // ? event.data.CorrectAnswer
    } else {
        registerWrongAnswer(CorrectAnswer, event.target.id);
    }
    return false;
}

function drawVerticalLine() {
    "use strict";
    // Draw a vertical line.
    //var ctx;
    ctx.beginPath();
    ctx.moveTo(130, 0);
    ctx.lineTo(130, 260);
    ctx.strokeStyle = "#FF0000";
    ctx.lineWidth = 5;
    ctx.stroke();
    CorrectAnswer = "vertical";
}

function drawHorizontalLine(ctx) {
    "use strict";
    // Draw a horizontal line.
    //var ctx;
    ctx.beginPath();
    ctx.moveTo(0, 130);
    ctx.lineTo(260, 130);
    ctx.strokeStyle = "#FF0000";
    ctx.lineWidth = 5;
    ctx.stroke();
    CorrectAnswer = "horizontal";
}

function drawDiagonalBackslashLine(ctx) {
    "use strict";
    // Draw a diagonal backslash line.
    //var ctx;
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(260, 260);
    ctx.strokeStyle = "#FF0000";
    ctx.lineWidth = 5;
    ctx.stroke();
    CorrectAnswer = "diagonal";
}

function drawDiagonalFrontslashLine(ctx) {
    "use strict";
        // Draw a diagonal front slash line.
        ctx.beginPath();
        ctx.moveTo(260, 0);
        ctx.lineTo(0, 260);
        ctx.strokeStyle = "#FF0000";
        ctx.lineWidth = 5;
        ctx.stroke();
        CorrectAnswer = "diagonal";
}

function displayLesson() {
    "use strict";
    var randomNumber = Math.floor((Math.random() * 6) + 1);
    // Math.floor rounds down to the nearest integer. The +1 insures not 0.
    // Math.random() * 6 can generate a fraction approaching 6 but not 6.
    console.log("146 randomNumber = " + randomNumber);

    ctx.fillStyle = "#5F9EA0"; /*CadetBlue*/
    ctx.fillStyle = "#9ea7b8";

    if (randomNumber === 1) {  // vertical is the correct answer.
        drawVerticalLine();
    } else if (randomNumber === 2) { // vertical is the correct answer.
        drawVerticalLine();
    } else if (randomNumber === 3) { // horizontal is the correct answer.
        drawHorizontalLine();
    } else if (randomNumber === 4) { // horizontal is the correct answer.
        drawHorizontalLine();
    } else if (randomNumber === 5) { // diagonal is the correct answer.
        drawDiagonalBackslashLine();
    } else if (randomNumber === 6) { // diagonal is the correct answer.
        drawDiagonalFrontslashLine();
    }
}

$(document).ready(function () {
    "use strict";
    displayLesson();
    $("#audio1").attr("src", "./sounds/is_the_line_horizontal_vertical_or_diagonal.ogg");
    $("#audio1").attr("autoplay", "true");
    $("#answer_buttons").click(this, onClick);
    shuffleButtons();
});
*/
